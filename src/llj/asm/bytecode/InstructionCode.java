package llj.asm.bytecode;

public enum InstructionCode {

    aaload      (0x32),
    aastore     (0x53),
    aconst_null (0x01),
    aload       (0x19, 2),
    aload_0     (0x2a),
    aload_1     (0x2b),
    aload_2     (0x2c),
    aload_3     (0x2d),
    areturn     (0xb0),
    astore      (0x3a, 2),
    astore_0    (0x4b),
    astore_1    (0x4c),
    astore_2    (0x4d),
    astore_3    (0x4e),

    athrow      (0xbf),

    d2f         (0x90),
    d2i         (0x8e),
    d2l         (0x8f),
    dadd        (0x63),
    daload      (0x31),
    dastore     (0x52),
    dcmpg       (0x98),
    dcmpl       (0x97),
    dconst_0    (0x0e),
    dconst_1    (0x0f),
    ddiv        (0x6f),
    dload       (0x18, 2),
    dload_0     (0x26),
    dload_1     (0x27),
    dload_2     (0x28),
    dload_3     (0x29),
    dmul        (0x6b),
    dneg        (0x77),
    drem        (0x73),
    dreturn     (0xaf),
    dstore      (0x39, 2),
    dstore_0    (0x47),
    dstore_1    (0x48),
    dstore_2    (0x49),
    dstore_3    (0x4a),
    dsub        (0x67),

    f2d         (0x8d),
    f2i         (0x8b),
    f2l         (0x8c),
    fadd        (0x62),
    faload      (0x30),
    fastore     (0x51),
    fcmpg       (0x96),
    fcmpl       (0x95),
    fconst_0    (0x0b),
    fconst_1    (0x0c),
    fconst_2    (0x0d),
    fdiv        (0x6e),
    fload       (0x17, 2),
    fload_0     (0x22),
    fload_1     (0x23),
    fload_2     (0x24),
    fload_3     (0x25),
    fmul        (0x6a),
    fneg        (0x76),
    frem        (0x72),
    freturn     (0xae),
    fstore      (0x38, 2),
    fstore_0    (0x43),
    fstore_1    (0x44),
    fstore_2    (0x45),
    fstore_3    (0x46),
    fsub        (0x66),

    i2b         (0x91),
    i2c         (0x92),
    i2d         (0x87),
    i2f         (0x86),
    i2l         (0x85),
    i2s         (0x93),
    iadd        (0x60),
    iaload      (0x2e),
    iand        (0x7e),
    iastore     (0x4f),
    iconst_m1   (0x02),
    iconst_0    (0x03),
    iconst_1    (0x04),
    iconst_2    (0x05),
    iconst_3    (0x06),
    iconst_4    (0x07),
    iconst_5    (0x08),
    idiv        (0x6c),
    iinc        (0x84, 3),
    iload       (0x15, 2),
    iload_0     (0x1a),
    iload_1     (0x1b),
    iload_2     (0x1c),
    iload_3     (0x1d),
    imul        (0x68),
    ineg        (0x74),
    ior         (0x80),
    irem        (0x70),
    ireturn     (0xac),
    ishl        (0x78),
    ishr        (0x7a),
    istore      (0x36, 2),
    istore_0    (0x3b),
    istore_1    (0x3c),
    istore_2    (0x3d),
    istore_3    (0x3e),
    isub        (0x64),
    iushr       (0x7c),
    ixor        (0x82),

    ifeq        (0x99, 3),
    ifne        (0x9a, 3),
    iflt        (0x9b, 3),
    ifge        (0x9c, 3),
    ifgt        (0x9d, 3),
    ifle        (0x9e, 3),
    if_icmpeq   (0x9f, 3),
    if_icmpne   (0xa0, 3),
    if_icmplt   (0xa1, 3),
    if_icmpge   (0xa2, 3),
    if_icmpgt   (0xa3, 3),
    if_icmple   (0xa4, 3),
    if_acmpeq   (0xa5, 3),
    if_acmpne   (0xa6, 3),
    ifnonnull   (0xc7, 3),
    ifnull      (0xc6, 3),

    _instanceof (0xc1, 3),
    checkcast   (0xc0, 3),

    invokedynamic   (0xba, 5),
    invokeinterface (0xb9, 5),
    invokespecial   (0xb7, 3),
    invokestatic    (0xb8, 3),
    invokevirtual   (0xb6, 3),
    _return         (0xb1),

    l2d         (0x8a),
    l2f         (0x89),
    l2i         (0x88),
    ladd        (0x61),
    laload      (0x2f),
    land        (0x7f),
    lastore     (0x50),
    lcmp        (0x94),
    lconst_0    (0x09),
    lconst_1    (0x0a),
    ldiv        (0x6d),
    lload       (0x16, 2),
    lload_0     (0x1e),
    lload_1     (0x1f),
    lload_2     (0x20),
    lload_3     (0x21),
    lmul        (0x69),
    lneg        (0x75),
    lor         (0x81),
    lrem        (0x71),
    lreturn     (0xad),
    lshl        (0x79),
    lshr        (0x7b),
    lstore      (0x37, 2),
    lstore_0    (0x3f),
    lstore_1    (0x40),
    lstore_2    (0x41),
    lstore_3    (0x42),
    lsub        (0x65),
    lushr       (0x7d),
    lxor        (0x83),

    ldc         (0x12, 2),
    ldc_w       (0x13, 3),
    ldc2_w      (0x14, 3),

    monitorenter            (0xc2),
    monitorexit             (0xc3),

    _new                    (0xbb, 3),
    newarray                (0xbc, 2),
    anewarray               (0xbd, 3),
    multianewarray          (0xc5, 4),

    arraylength             (0xbe),

    baload                  (0x33),
    bastore                 (0x54),
    caload                  (0x34),
    castore                 (0x55),
    saload                  (0x35),
    sastore                 (0x56),


    bipush                  (0x10, 2),
    sipush                  (0x11, 3),

    dup                     (0x59),
    dup_x1                  (0x5a),
    dup_x2                  (0x5b),
    dup2                    (0x5c),
    dup2_x1                 (0x5d),
    dup2_x2                 (0x5e),
    nop                     (0x00),
    pop                     (0x57),
    pop2                    (0x58),
    swap                    (0x5f),

    getfield(0xb4, 3),
    getstatic(0xb2, 3),
    putfield(0xb5, 3),
    putstatic(0xb3, 3),

    jsr(0xa8, 3),
    jsr_w(0xc9, 5),
    ret(0xa9, 2),

    _goto(0xa7, 3),
    goto_w(0xc8, 5),

    tableswitch(0xaa, -1),
    lookupswitch(0xab, -1),

    wide(0xc4),

    breakpoint(0xca),
    impdep1(0xfe),
    impdep2(0xff);

    public final int code, size;

    private InstructionCode(int code, int size) {
        this.code = code;
        this.size = size;
    }

    private InstructionCode(int code) {
        this(code, 1);
    }

    public static InstructionCode getByCode(int code) {
        for(InstructionCode instr : values()) {
            if (instr.code == code) return instr;
        }
        throw new IllegalArgumentException("Instruction code is illegal:" + code);
    }

}
